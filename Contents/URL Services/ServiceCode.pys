import re

HTTP.Headers['User-Agent'] = 'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; en-us) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27'
AMT_VIDEOS_NS = {'a':'http://www.apple.com/itms/'}

####################################################################################################

def MetadataObjectForURL(url):
  # Construct a metadata item
  #return VideoClipObject(
  #  title = title,
  #  summary = summary,
  #  tagline = tagline,
  #  thumb = thumb
  #)
  return None

####################################################################################################

def MediaObjectsForURL(url):
  studio, title, video = re.findall('^http:\/\/trailers.apple.com/trailers/([^/]+)/([^/#]+)#?(.+)?$', url)[0]
  if not video: video = 'trailer'
  url = 'http://trailers.apple.com/moviesxml/s/%s/%s/%s.xml' % (studio, title, video)

  items = []

  for video in XML.ElementFromURL(url, cacheTime=7200).xpath('//a:TrackList//a:array/a:dict', namespaces=AMT_VIDEOS_NS):
    duration = video.xpath('./a:key[text()="duration"]/following-sibling::*[1]', namespaces=AMT_VIDEOS_NS)[0].text
    video_url = video.xpath('./a:key[text()="previewURL"]/following-sibling::*[1]', namespaces=AMT_VIDEOS_NS)[0].text

    container, ipod, video_resolution = VideoInfo(video_url)

    if ipod:
      platforms = [ClientPlatform.iOS, ClientPlatform.Android]
    else:
#      platforms = [ClientPlatform.MacOSX]
      platforms = []

    mo = MediaObject(
      parts = [
        PartObject(key=video_url)
      ],
      protocols = [Protocol.HTTPMP4Streaming],
      platforms = platforms,
      container = container,
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC,
      video_resolution = video_resolution,
      duration = int(duration)
    )

    items.append(mo)

  return items

####################################################################################################

def VideoInfo(url):
  container = 'mov'
  if url.endswith('.m4v'):
    container = 'm4v'

  ipod = False
  if re.search('_i([0-9]+)\.(m4v|mov)$', url):
    ipod = True

  resolution = re.search('_(h|i)([0-9]+)(w|p)?\.(mov|m4v)', url)
  if resolution.group(3) == 'p':
    video_resolution = resolution.group(2)
  elif resolution.group(1) == 'i' and resolution.group(2) == '320':
    video_resolution = 360 # Apple's i320 is actually 640
  else:
    width = int(resolution.group(2))
    video_resolution = int((width/16)*9)

  return [container, ipod, str(video_resolution)]
